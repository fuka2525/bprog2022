GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/fuka/bprog2022/.ghci
2022-05-19 15:41:29.794328234
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/fuka/bprog2022/.ghci
2022-05-19 15:50:26.598637218
>>> 23+5
28
2022-05-19 15:54:15.002329245
>>> 3+2*5
13
2022-05-19 15:55:23.12443847
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/fuka/bprog2022/.ghci
2022-05-19 15:57:10.683299549
>>> 3+2
5
2022-05-19 15:57:22.495642993
>>> sqrt 2
1.4142135623730951
2022-05-19 15:59:46.298187729
>>> double 3

<interactive>:3:1: error: Variable not in scope: double :: t0 -> t
2022-05-19 16:02:06.835437997
>>> GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/fuka/bprog2022/.ghci
2022-05-26 15:02:12.306024901
>>> maxBound :: Int
9223372036854775807
2022-05-26 15:04:20.815154646
>>> 2 ^ 63 - 1
9223372036854775807
2022-05-26 15:05:09.056916058
>>> minBound :: Int
-9223372036854775808
2022-05-26 15:05:46.508294638
>>> :e src/First.hs
   1  module First where
   2  
   3      double :: Int  -> Int
   4      double x = x + X
Ok, no modules loaded.
:l src/First.hs
2022-05-26 15:49:11.824917889
>>> [1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:4:20: error: Data constructor not in scope: X :: Int
  |
4 |     double x = x + X
  |                    ^
Failed, no modules loaded.
2022-05-26 15:49:11.880334446
>>> 
2022-05-26 15:52:17.167797848
>>> :e src/First.hs
   1  module First where
   2  
   3      double :: Int  -> Int
   4      double x = x + x
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-05-26 15:53:22.341955844
>>> :l src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-05-26 15:53:22.442734664
>>> double 3
6
2022-05-26 15:56:21.018215653
>>> double 123
246
2022-05-26 15:56:33.407004673
>>> double (1+2）

<interactive>:11:12: error: lexical error at end of input
2022-05-26 15:57:19.481112831
>>> :q
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/fuka/bprog2022/.ghci
2022-06-09 14:55:18.116972839
>>> 2 + 3 * 4
14
2022-06-09 14:58:39.563664047
>>> （2 + 3 ）* 4

<interactive>:2:1: error: lexical error at character '2'
2022-06-09 15:00:59.159788372
>>> (2 + 3 ) * 4
20
2022-06-09 15:02:17.905279989
>>> sqrt (3 ^ 2 + 4 ^ 2 )
5.0
2022-06-09 15:05:15.749043235
>>> sqrt ( 25 :: Int)

<interactive>:5:1: error:
    • No instance for (Floating Int) arising from a use of ‘sqrt’
    • In the expression: sqrt (25 :: Int)
      In an equation for ‘it’: it = sqrt (25 :: Int)
2022-06-09 15:08:42.284208793
>>> sqrt ( 25 :: Double)
5.0
2022-06-09 15:09:55.566709654
>>> sqre 25

<interactive>:7:1: error:
    • Variable not in scope: sqre :: t0 -> t
    • Perhaps you meant ‘sqrt’ (imported from Prelude)
2022-06-09 15:10:05.225723066
>>> sqrt 25
5.0
2022-06-09 15:10:19.165331278
>>> hoge 25 :: Int

<interactive>:9:1: error: Variable not in scope: hoge :: t0 -> Int
2022-06-09 15:13:31.902058631
>>> head [1, 2, 3]
1
2022-06-09 15:46:21.55869119
>>> head [3, 1, 4, 1, 5]
3
2022-06-09 15:46:47.964706729
>>> head [ ]
*** Exception: Prelude.head: empty list
2022-06-09 15:48:36.677995328
>>> hoge = [ 3, 1, 4, 1, 5,] :: [Int]

<interactive>:13:24: error: parse error on input ‘]’
2022-06-09 15:50:47.948920578
>>> hoge

<interactive>:14:1: error: Variable not in scope: hoge
2022-06-09 15:51:16.463476283
>>> head hoge

<interactive>:15:6: error: Variable not in scope: hoge :: [a]
2022-06-09 15:51:29.962659763
>>> hoge = [3, 1, 4, 1, 5] :: [Int]
2022-06-09 15:52:12.167000572
>>> hoge
[3,1,4,1,5]
2022-06-09 15:52:21.51532834
>>> head hoge
3
2022-06-09 15:52:38.565359477
>>> tail hoge
[1,4,1,5]
2022-06-09 15:52:51.69496303
>>> tail []
*** Exception: Prelude.tail: empty list
2022-06-09 15:53:02.019793247
>>> hoge !! 0
3
2022-06-09 15:55:10.371792839
>>> hoge !! 2
4
2022-06-09 15:56:24.499237349
>>> take 3 hoge
[3,1,4]
2022-06-09 15:56:55.220631833
>>> hoge
[3,1,4,1,5]
2022-06-09 15:57:03.169654901
>>> drop 3 hoge
[1,5]
2022-06-09 15:57:25.492945759
>>> hoge 5 hoge

<interactive>:26:1: error:
    • Couldn't match expected type: t0 -> [Int] -> t
                  with actual type: [Int]
    • The function ‘hoge’ is applied to two value arguments,
        but its type ‘[Int]’ has none
      In the expression: hoge 5 hoge
      In an equation for ‘it’: it = hoge 5 hoge
    • Relevant bindings include it :: t (bound at <interactive>:26:1)
2022-06-09 15:58:23.876911451
>>> hoge !! 5
*** Exception: Prelude.!!: index too large
2022-06-09 15:58:56.762874669
>>> take 10 hoge
[3,1,4,1,5]
2022-06-09 15:59:20.743856589
>>> drop 10 hoge
[]
2022-06-09 15:59:55.039073075
>>> length hoge
5
2022-06-09 16:01:08.010711536
>>> length []
0
2022-06-09 16:01:23.557419788
>>> sum hoge
14
2022-06-09 16:02:03.804182398
>>> product hoge
60
2022-06-09 16:03:04.236329538
>>> hoge ++ hoge
[3,1,4,1,5,3,1,4,1,5]
2022-06-09 16:04:56.112454627
>>> reverse hoge
[5,1,4,1,3]
2022-06-09 16:05:35.34955163
>>> :e src/First.hs
   1  module First where
   2  
   3      double :: Int  -> Int
   4      double x = x + x
Ok, no modules loaded.
2022-06-09 16:07:54.411976089
>>> :load src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-09 16:07:54.46951952
>>> double 3 + 3
9
2022-06-09 16:08:49.1002785
>>> double (3 + 3)
12
2022-06-09 16:11:29.600302919
>>> quadruble 2

<interactive>:40:1: error:
    Variable not in scope: quadruble :: t0 -> t
2022-06-09 16:15:16.342336904
>>> :quit
Leaving GHCi.
GHCi, version 9.0.2: https://www.haskell.org/ghc/  :? for help
Loaded GHCi configuration from /home/fuka/bprog2022/.ghci
2022-06-16 15:02:08.521986944
>>> take 3 [3,1,4,1,5]
[3,1,4]
2022-06-16 15:04:24.706692076
>>> :e src/First.hs
   1  module First where
   2  
   3      double :: Int  -> Int
   4      double x = x + x
   5  
   6      quadruple :: Int -> Int
   7      quadruple X = double  (double x)
Ok, no modules loaded.
2022-06-16 15:11:01.075623601
>>> :l  src/First.hs
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:7:15: error: Not in scope: data constructor ‘X’
  |
7 |     quadruple X = double  (double x)
  |               ^
Failed, no modules loaded.
2022-06-16 15:11:01.148525828
>>> double

<interactive>:4:1: error: Variable not in scope: double
2022-06-16 15:13:01.589273186
>>> take (double 2) [1,2,3,4,5]

<interactive>:5:7: error:
    Variable not in scope: double :: t0 -> Int
2022-06-16 15:15:34.495543062
>>> take (double 2 ) [1,2,3,4,5]

<interactive>:6:7: error:
    Variable not in scope: double :: t0 -> Int
2022-06-16 15:17:03.155380889
>>> [1 .. 10]
[1,2,3,4,5,6,7,8,9,10]
2022-06-16 15:20:43.33784577
>>> :e
   1  module First where
   2  
   3      double :: Int  -> Int
   4      double x = x + x
   5  
   6      quadruple :: Int -> Int
   7      quadruple X = double  (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product [1 .. n]
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:7:15: error: Not in scope: data constructor ‘X’
  |
7 |     quadruple X = double  (double x)
  |               ^
Failed, no modules loaded.
2022-06-16 15:21:09.879719046
>>> :e
   1  module First where
   2  
   3      double :: Int  -> Int
   4      double x = x + x
   5  
   6      quadruple :: Int -> Int
   7      quadruple x = double  (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product [1 .. n]
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:24:21.376886549
>>> factorial 3
6
2022-06-16 15:24:50.491339803
>>> factorial 4
24
2022-06-16 15:25:03.905866718
>>> :e
   1  module First where
   2  
   3      double :: Int  -> Int
   4      double x = x + x
   5  
   6      quadruple :: Int -> Int
   7      quadruple x = double  (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product [1 .. n]
  11  
  12      average :: Int -> Int
  13      average xs = sum xs `div` length xs
  14  
  15      ave :: [Int] -> Int
  16      ave xs = div (sum xs) (length xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )

src/First.hs:13:22: error:
    • Couldn't match expected type ‘t0 Int’ with actual type ‘Int’
    • In the first argument of ‘sum’, namely ‘xs’
      In the first argument of ‘div’, namely ‘sum xs’
      In the expression: sum xs `div` length xs
   |
13 |     average xs = sum xs `div` length xs
   |                      ^^

src/First.hs:13:38: error:
    • Couldn't match expected type ‘t1 a0’ with actual type ‘Int’
    • In the first argument of ‘length’, namely ‘xs’
      In the second argument of ‘div’, namely ‘length xs’
      In the expression: sum xs `div` length xs
   |
13 |     average xs = sum xs `div` length xs
   |                                      ^^
Failed, no modules loaded.
2022-06-16 15:38:17.334844544
>>> :e
   1  module First where
   2  
   3      double :: Int  -> Int
   4      double x = x + x
   5  
   6      quadruple :: Int -> Int
   7      quadruple x = double  (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product [1 .. n]
  11  
  12      average :: [Int] -> Int
  13      average xs = sum xs `div` length xs
  14  
  15      ave :: [Int] -> Int
  16      ave xs = div (sum xs) (length xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 15:39:46.607875223
>>> average [1,2,3,4,5]
3
2022-06-16 15:40:30.004073493
>>> :t take 3 [1,2,3,4,5]
take 3 [1,2,3,4,5] :: Num a => [a]
2022-06-16 15:49:55.826076983
>>> init [1 .. 5]
[1,2,3,4]
2022-06-16 16:07:03.703043838
>>> :e
   1  module First where
   2  
   3      double :: Int  -> Int
   4      double x = x + x
   5  
   6      quadruple :: Int -> Int
   7      quadruple x = double  (double x)
   8  
   9      factorial :: Integer -> Integer
  10      factorial n = product [1 .. n]
  11  
  12      average :: [Int] -> Int
  13      average xs = sum xs `div` length xs
  14  
  15      ave :: [Int] -> Int
  16      ave xs = div (sum xs) (length xs)
  17  
  18      myinit :: [a] -> [a]
  19      myinit (x:[]) = []
  20      myinit (x:xs) = x : (init xs)
[1 of 1] Compiling First            ( src/First.hs, interpreted )
Ok, one module loaded.
2022-06-16 16:14:42.020772197
>>> myinit [1 .. 5]
[1,2,3,4]
2022-06-16 16:14:57.489006183
>>> myinit []
*** Exception: src/First.hs:(19,5)-(20,33): Non-exhaustive patterns in function myinit

2022-06-16 16:15:10.697204187
>>> :q
Leaving GHCi.
